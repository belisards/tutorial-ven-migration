[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Venezuelans in Chile, Colombia, Ecuador, and Peru",
    "section": "",
    "text": "A step-by-step guide, using R to analyze statistics from host populations and Venezuelans in Chile, Colombia, Ecuador and Peru."
  },
  {
    "objectID": "index.html#preliminary-analysis",
    "href": "index.html#preliminary-analysis",
    "title": "Venezuelans in Chile, Colombia, Ecuador, and Peru",
    "section": "Preliminary analysis",
    "text": "Preliminary analysis\nTo understand how each country file is structured, review some core variables. You can find detailed descriptions for all available variables in the data dictionaries (codebooks).\n\nsurvey: the name of the survey;\nwave: the wave of the survey. Surveys might have more than one round, known as waves. Each wave is collected in a distinct period of time.\nsamp: indicate whether the response comes from Venezuelan or the host population;\nweight: the weight assigned for each record to produce unbiased estimates;\n\nEach file aggregates different surveys from the same country. Therefore, you should use the variables survey and wave to filter the data and pick the right source depending on your question. Because distinct surveys cover different questions, some rows have missing values.\n\nHow to inspect missing values\nTo identify the missing information, plot the values for each column and surveys. The chart shows more records from the Encuesta de personas en Movilidad y Comunidades de Acogida (EPEC) survey than High-Frequency Phone Surveys (HFPS). The highlighted regions make it easy to spot which variables have missing values.\nThe vis_miss() function is used to visualize missing data in a dataset. It takes the dataset survey as the first parameter and a column to group (facet) the observations.\n\nvisdat::vis_miss(survey,facet = survey)\n\n\n\n\nTo keep it simple, we analyze only information on age, marital status, region, and population type (host or Venezuelan) in the HPFS survey. As the image shows, these variables have no missing values.\nMissing values are crucial to the data preparation phase. You might need to drop missing values or impute values to conduct other analyses. Your chosen strategy depends on why values are missing, the number of missing values, and your analytical goals. Refer to the data dictionary and documentation to understand the reasons for missing values.\n\n\nRecords by surveys and waves\nBefore applying the weights, we will check the total number of respondents by survey, wave and population.\nThe group_by function is used to group data by one or more variables. This command doesn’t change the dataset; rather, it sets up a new configuration for subsequent operations within each group. The summarise function is used to compute summary statistics or metrics for each group. Finally, the kable() function presents the result better than the standard output.\n\nsummary_df <- survey %>% \n  group_by(survey, wave, samp) %>% \n  summarise(total = n(), .groups = 'drop')\n\n\n# Show the table\nkable(summary_df, caption = \"Number of records by survey, wave and population\")\n\n\nNumber of records by survey, wave and population\n\n\nsurvey\nwave\nsamp\ntotal\n\n\n\n\nEPEC\n1\nHosts\n1807\n\n\nEPEC\n1\nMigrants\n1256\n\n\nHFPS\n2\nHosts\n503\n\n\nHFPS\n2\nMigrants\n356\n\n\n\n\n\nSo far, the dataset reflects the number of responses from an unweighted sample of Venezuelan and host population. Next, we demonstrate how to use weights to calculate representative estimates."
  },
  {
    "objectID": "index.html#configure-the-survey-design",
    "href": "index.html#configure-the-survey-design",
    "title": "Venezuelans in Chile, Colombia, Ecuador, and Peru",
    "section": "Configure the survey design",
    "text": "Configure the survey design\nAs different surveys present distinct questions, select the survey according to the goals of your analysis. Most of the indicators from Ecuador come from the HFPS, except those referring to job occupations and health insurance, which come from the EPEC survey.\nSelect the HFPS survey to calculate and compare the average age of Venezuelan and the host population in Ecuador. Let’s start filtering the dataset to get only observations from the HFPS using the filter() function.\n\nsurvey_filter <- survey %>% \n  filter(survey == \"HFPS\")\n\nNext, we load the survey design and the weights associated with each response. There are a variety of ways to implement weighted data analysis using R. For convenience, we use the function svydesign from survey, an R package with pre-built features tailored for survey analysis. It allows for the specification of survey design parameters such as sampling weights.\n\nsurvey_ecu <- svydesign(ids = ~1, # ~1 means the survey has no clusters\n                       data= survey_filter, \n                       weights = survey_filter$weight)"
  },
  {
    "objectID": "index.html#descriptive-statistic",
    "href": "index.html#descriptive-statistic",
    "title": "Venezuelans in Chile, Colombia, Ecuador, and Peru",
    "section": "Descriptive statistic",
    "text": "Descriptive statistic\nCreating basic summary statistics using the survey package is straightforward. Our tutorial shows how to group observations and analyze numeric and categorical variables. If you group by region (the column code_province), bear in mind that the weights are not meant for this level of disaggregation, and the estimates may not accurately reflect the characteristics of these populations in each region.\n\nNumeric values\nThe svyby function is used to apply a function to subsets of survey data defined by one or more variables. We will use it to group the records by the population type (~samp) and calculate the mean age (svymean).\nThe output shows the mean and the standard error (se) for each estimate. Standard error values use the same unit of measurement as the mean. They represent how much the sample mean calculated is expected to vary from the actual population mean.\n\n# Group by and calculate the mean age\nsvyby(formula = ~age, by = ~samp, design = survey_ecu, svymean)\n\n             samp      age        se\nHosts       Hosts 39.88760 0.9410057\nMigrants Migrants 36.09989 0.5309258\n\n\n\n\nCategoric variables\nThe svytable function is used to create contingency tables for survey data, taking into account survey design features such as sampling weights. Next, we use it to analyze marital status.\nUsing prop.table(crosstab, 1), we present the values as percentages of the population/row level (using 0 instead of 1 in the command would sum the values to 100 across columns). Additionally, we round the values to two decimal places with round().\n\n# Cross-tabulates values\ncrosstab <- svytable(~samp + marital_status, design = survey_ecu)\n\n\n# Calculate percentages\ncrosstab_percentages <- round(prop.table(crosstab,1) * 100,2) \n\n\n# Show the table\nknitr::kable(crosstab_percentages, \n             caption = \"Crosstab of Occupation by Marital Status (%)\")\n\n\nCrosstab of Occupation by Marital Status (%)\n\n\n\nMarried/Cohabitation\nOther\nSingle\n\n\n\n\nHosts\n54.32\n10.64\n35.04\n\n\nMigrants\n51.14\n4.29\n44.57"
  },
  {
    "objectID": "spanish.html",
    "href": "spanish.html",
    "title": "Venezolanos en Chile, Colombia, Ecuador y Perú",
    "section": "",
    "text": "Una guía paso a paso, utilizando R para analizar estadísticas de las poblaciones anfitrionas y venezolanos en Chile, Colombia, Ecuador y Perú."
  },
  {
    "objectID": "spanish.html#preliminary-analysis",
    "href": "spanish.html#preliminary-analysis",
    "title": "Venezolanos en Chile, Colombia, Ecuador y Perú",
    "section": "Preliminary analysis",
    "text": "Preliminary analysis\nTo understand how each country file is structured, review some core variables. You can find detailed descriptions for all available variables in the data dictionaries (codebooks).\n\nsurvey: the name of the survey;\nwave: the wave of the survey. Surveys might have more than one round, known as waves. Each wave is collected in a distinct period of time.\nsamp: indicate whether the response comes from Venezuelan or the host population;\nweight: the weight assigned for each record to produce unbiased estimates;\n\nEach file aggregates different surveys from the same country. Therefore, you should use the variables survey and wave to filter the data and pick the right source depending on your question. Because distinct surveys cover different questions, some rows have missing values.\n\nHow to inspect missing values\nTo identify the missing information, plot the values for each column and surveys. The chart shows more records from the Encuesta de personas en Movilidad y Comunidades de Acogida (EPEC) survey than High-Frequency Phone Surveys (HFPS). The highlighted regions make it easy to spot which variables have missing values.\nThe vis_miss() function is used to visualize missing data in a dataset. It takes the dataset survey` as the first parameter and a column to group (facet) the observations.\n\nvisdat::vis_miss(survey,facet = survey)\n\n\n\n\nTo keep it simple, we analyze only information on age, marital status, region, and population type (host or Venezuelan) in the HPFS survey. As the image shows, these variables have no missing values.\nMissing values are crucial to the data preparation phase. You might need to drop missing values or impute values to conduct other analyses. Your chosen strategy depends on why values are missing, the number of missing values, and your analytical goals. Refer to the data dictionary and documentation to understand the reasons for missing values.\n\n\nRecords by surveys and waves\nBefore applying the weights, we will check the total number of respondents by survey, wave and population.\nThe group_by function is used to group data by one or more variables. This command doesn’t change the dataset; rather, it sets up a new configuration for subsequent operations within each group. The summarise function is used to compute summary statistics or metrics for each group. Finally, the kable() function presents the result better than the standard output.\n\nsummary_df <- survey %>% \n  group_by(survey, wave, samp) %>% \n  summarise(total = n(), .groups = 'drop')\n\n\n# Show the table\nkable(summary_df, caption = \"Number of records by survey, wave and population\")\n\n\nNumber of records by survey, wave and population\n\n\nsurvey\nwave\nsamp\ntotal\n\n\n\n\nEPEC\n1\nHosts\n1807\n\n\nEPEC\n1\nMigrants\n1256\n\n\nHFPS\n2\nHosts\n503\n\n\nHFPS\n2\nMigrants\n356\n\n\n\n\n\nSo far, the dataset reflects the number of responses from an unweighted sample of Venezuelan and host population. Next, we demonstrate how to use weights to calculate representative estimates."
  },
  {
    "objectID": "spanish.html#configure-the-survey-design",
    "href": "spanish.html#configure-the-survey-design",
    "title": "Venezolanos en Chile, Colombia, Ecuador y Perú",
    "section": "Configure the survey design",
    "text": "Configure the survey design\nAs different surveys present distinct questions, select the survey according to the goals of your analysis. Most of the indicators from Ecuador come from the HFPS, except those referring to job occupations and health insurance, which come from the EPEC survey.\nSelect the HFPS survey to calculate and compare the average age of Venezuelan and the host population in Ecuador. Let’s start filtering the dataset to get only observations from the HFPS using the filter() function.\n\nsurvey_filter <- survey %>% \n  filter(survey == \"HFPS\")\n\nNext, we load the survey design and the weights associated with each response. There are a variety of ways to implement weighted data analysis using R. For convenience, we use the function svydesign from survey, an R package with pre-built features tailored for survey analysis. It allows for the specification of survey design parameters such as sampling weights.\n\nsurvey_ecu <- svydesign(ids = ~1, # ~1 means the survey has no clusters\n                       data= survey_filter, \n                       weights = survey_filter$weight)"
  },
  {
    "objectID": "spanish.html#descriptive-statistic",
    "href": "spanish.html#descriptive-statistic",
    "title": "Venezolanos en Chile, Colombia, Ecuador y Perú",
    "section": "Descriptive statistic",
    "text": "Descriptive statistic\nCreating basic summary statistics using the survey package is straightforward. Our tutorial shows how to group observations and analyze numeric and categorical variables. If you group by region (the column code_province), bear in mind that the weights are not meant for this level of disaggregation, and the estimates may not accurately reflect the characteristics of these populations in each region.\n\nNumeric values\nThe svyby function is used to apply a function to subsets of survey data defined by one or more variables. We will use it to group the records by the population type (~samp) and calculate the mean age (svymean).\nThe output shows the mean and the standard error (se) for each estimate. Standard error values use the same unit of measurement as the mean. They represent how much the sample mean calculated is expected to vary from the actual population mean.\n\n# Group by and calculate the mean age\nsvyby(formula = ~age, by = ~samp, design = survey_ecu, svymean)\n\n             samp      age        se\nHosts       Hosts 39.88760 0.9410057\nMigrants Migrants 36.09989 0.5309258\n\n\n\n\nCategoric variables\nThe svytable function is used to create contingency tables for survey data, taking into account survey design features such as sampling weights. Next, we use it to analyze marital status.\nUsing prop.table(crosstab, 1), we present the values as percentages of the population/row level (using 0 instead of 1 in the command would sum the values to 100 across columns). Additionally, we round the values to two decimal places with round().\n\n# Cross-tabulates values\ncrosstab <- svytable(~samp + marital_status, design = survey_ecu)\n\n\n# Calculate percentages\ncrosstab_percentages <- round(prop.table(crosstab,1) * 100,2) \n\n\n# Show the table\nknitr::kable(crosstab_percentages, \n             caption = \"Crosstab of Occupation by Marital Status (%)\")\n\n\nCrosstab of Occupation by Marital Status (%)\n\n\n\nMarried/Cohabitation\nOther\nSingle\n\n\n\n\nHosts\n54.32\n10.64\n35.04\n\n\nMigrants\n51.14\n4.29\n44.57"
  },
  {
    "objectID": "spanish.html#análisis-preliminar",
    "href": "spanish.html#análisis-preliminar",
    "title": "Venezolanos en Chile, Colombia, Ecuador y Perú",
    "section": "Análisis preliminar",
    "text": "Análisis preliminar\nPara entender cómo está estructurado el archivo de cada país, revise algunas variables principales. Puede encontrar descripciones detalladas para todas las variables disponibles en los diccionarios de datos.\n\nsurvey: el nombre de la encuesta;\nwave: la ronda de la encuesta. Las encuestas pueden tener más de una ronda. Cada ronda se recoge en un período de tiempo distinto.\nsamp: indica si la respuesta proviene de la población venezolana o de acogida;\nweight: el peso asignado a cada registro para producir estimaciones;\n\nCada archivo agrega diferentes encuestas del mismo país. Por lo tanto, debes utilizar las variables survey y wave para filtrar los datos y elegir la fuente correcta. Debido a que distintas encuestas cubren diferentes preguntas, a algunos registros les faltan valores.\n\nCómo inspeccionar valores faltantes\nPara identificar la información faltante, vamos visualizar los valores para cada columna y encuestas. El gráfico muestra más registros de la encuesta Encuesta de personas en Movilidad y Comunidades de Acogida (EPEC) que Encuestas Telefónicas de Alta Frecuencia (HFPS). Las regiones resaltadas facilitan la identificación de qué variables tienen valores faltantes.\nUtilizamos la función vis_miss() para visualizar datos faltantes en un conjunto de datos. Definimos los datos como primer parámetro y una columna para agrupar (facet) las observaciones.\n\nvisdat::vis_miss(survey,facet = survey)\n\n\n\n\nPara simplificar, analizaremos solo información sobre edad, estado civil, región y tipo de población (anfitriona o venezolana) en la encuesta HPFS. Como muestra la imagen, a estas variables no les faltan valores.\nLos valores faltantes son cruciales para la fase de preparación de datos. Es posible que deba descartar los valores faltantes o imputar valores para realizar algunas análisis. La estrategia que elija depende de por qué faltan valores, la cantidad de valores faltantes y sus objetivos analíticos. Consulte el diccionario de datos y la documentación para comprender los motivos de los valores faltantes.\n\n\nRegistros por encuestas y rondas\nAntes de aplicar los pesos, verificaremos el número total de encuestados por encuesta, ronda y población.\nLa función group_by se utiliza para agrupar datos por una o más variables. Este comando no cambia los datos, solo establece una nueva configuración para operaciones posteriores dentro de cada grupo. La función de resumen se utiliza para calcular estadísticas o métricas resumidas para cada grupo. Finalmente, la función kable() presenta el resultado mejor que la salida estándar.\n\nsummary_df <- survey %>% \n  group_by(survey, wave, samp) %>% \n  summarise(total = n(), .groups = 'drop')\n\n\n# Show the table\nkable(summary_df, caption = \"Number of records by survey, wave and population\")\n\n\nNumber of records by survey, wave and population\n\n\nsurvey\nwave\nsamp\ntotal\n\n\n\n\nEPEC\n1\nHosts\n1807\n\n\nEPEC\n1\nMigrants\n1256\n\n\nHFPS\n2\nHosts\n503\n\n\nHFPS\n2\nMigrants\n356\n\n\n\n\n\nHasta ahora, el conjunto de datos refleja el número de respuestas de una muestra no ponderada de la población venezolana y anfitriona. A continuación, demostramos cómo usar los pesos para calcular estimaciones representativas."
  },
  {
    "objectID": "spanish.html#configurar-el-diseño-de-la-encuesta",
    "href": "spanish.html#configurar-el-diseño-de-la-encuesta",
    "title": "Venezolanos en Chile, Colombia, Ecuador y Perú",
    "section": "Configurar el diseño de la encuesta",
    "text": "Configurar el diseño de la encuesta\nComo las diferentes encuestas presentan preguntas distintas, seleccione la encuesta de acuerdo con los objetivos de su análisis. La mayoría de los indicadores de Ecuador provienen del HFPS, excepto los referentes a ocupaciones laborales y seguros de salud, que provienen de la encuesta EPEC.\nSeleccione la encuesta HFPS para calcular y comparar la edad promedio de la población venezolana y de acogida en Ecuador. Comencemos a filtrar el conjunto de datos para obtener solo observaciones del HFPS usando la función filter().\n\nsurvey_filter <- survey %>% \n  filter(survey == \"HFPS\")\n\nA continuación, cargamos el diseño de la encuesta y los pesos asociados a cada respuesta. Hay una variedad de formas de implementar el análisis de datos ponderados usando R. Para mayor comodidad, usamos la función svydesign de la biblioteca survey, un paquete de R con funciones prediseñadas diseñadas para el análisis de encuestas. Permite especificar parámetros de diseño de encuestas, como ponderaciones muestrales.\n\nsurvey_ecu <- svydesign(ids = ~1, # ~1 means the survey has no clusters\n                       data= survey_filter, \n                       weights = survey_filter$weight)"
  },
  {
    "objectID": "spanish.html#estadísticas-descriptivas",
    "href": "spanish.html#estadísticas-descriptivas",
    "title": "Venezolanos en Chile, Colombia, Ecuador y Perú",
    "section": "Estadísticas descriptivas",
    "text": "Estadísticas descriptivas\nCrear estadísticas resumidas básicas utilizando la biblioteca survey es sencillo. Nuestro tutorial muestra cómo agrupar observaciones y analizar variables numéricas y categóricas. Si agrupa por región (la columna code_province), tenga en cuenta que las ponderaciones no están destinadas a este nivel de desagregación y que las estimaciones pueden no reflejar con precisión las características de estas poblaciones en cada región.\n\nValores numéricos\nLa función svyby se utiliza para aplicar una función a subconjuntos de datos de encuesta definidos por una o más variables. Lo usaremos para agrupar los registros por tipo de población (~samp) y calcular la edad media (svymean).\nEl resultado muestra la media y el error estándar (se) para cada estimación. Los valores de error estándar utilizan la misma unidad de medida que la media. Representan cuánto se espera que varíe la media muestral calculada de la media poblacional real.\n\n# Group by and calculate the mean age\nsvyby(formula = ~age, by = ~samp, design = survey_ecu, svymean)\n\n             samp      age        se\nHosts       Hosts 39.88760 0.9410057\nMigrants Migrants 36.09989 0.5309258\n\n\n\n\nVariables categóricas\nLa función svytable se utiliza para crear tablas de contingencia para datos de encuestas, teniendo en cuenta características del diseño de la encuesta, como las ponderaciones muestrales. A continuación, lo utilizamos para analizar el estado civil.\nUsando prop.table(crosstab, 1), presentamos los valores como porcentajes del nivel de población/fila (usar 0 en lugar de 1 en el comando sumaría los valores a 100 en todas las columnas). Además, redondeamos los valores a dos decimales con round().\n\n# Cross-tabulates values\ncrosstab <- svytable(~samp + marital_status, design = survey_ecu)\n\n\n# Calculate percentages\ncrosstab_percentages <- round(prop.table(crosstab,1) * 100,2) \n\n\n# Show the table\nknitr::kable(crosstab_percentages, \n             caption = \"Crosstab of Occupation by Marital Status (%)\")\n\n\nCrosstab of Occupation by Marital Status (%)\n\n\n\nMarried/Cohabitation\nOther\nSingle\n\n\n\n\nHosts\n54.32\n10.64\n35.04\n\n\nMigrants\n51.14\n4.29\n44.57"
  },
  {
    "objectID": "spanish.html#cargar-bibliotecas",
    "href": "spanish.html#cargar-bibliotecas",
    "title": "Venezolanos en Chile, Colombia, Ecuador y Perú",
    "section": "Cargar bibliotecas",
    "text": "Cargar bibliotecas\nPrimero, cargaremos las bibliotecas necesarias para nuestra guía usando el comando biblioteca. Explicamos el objetivo principal de cada uno a través de comentarios colocados después del hashtag (#).\n\nlibrary(survey) # para manejar los pesos de la encuesta\nlibrary(tidyverse) # para manipular datos fácilmente\nlibrary(visdat) # para visualizar los valores faltantes\nlibrary(knitr) # para formatear bien la salida"
  },
  {
    "objectID": "spanish.html#cómo-leer-los-datos",
    "href": "spanish.html#cómo-leer-los-datos",
    "title": "Venezolanos en Chile, Colombia, Ecuador y Perú",
    "section": "Cómo leer los datos",
    "text": "Cómo leer los datos\nPara leer los datos de la encuesta e inspeccionar la información disponible, utilizamos el conjunto de datos de Ecuador como ejemplo.\n\nfile_name = \"https://www.jointdatacenter.org/wp-content/uploads/2024/02/ecu_host_mig.csv\" \n\nsurvey = read.csv(file_name)\n\nPuede seleccionar datos para un país diferente cambiando la URL después de la variable file_name. Todos los conjuntos de datos y diccionarios de datos están disponibles en nuestro sitio web: https://www.jointdatacenter.org/venezuelan-migration-data/\nPara elegir un país que no sea Ecuador, visite la página de arriba, haga clic derecho en “Cleaned survey data (CSV)”, elija “Copiar dirección de enlace” y cambie la URL en el primeira línea del código anterior, asegurándose de que se conserven las citas.\nEn la segunda línea del bloque de código anterior, el comando read.csv carga los datos en la URL o archivo especificado anteriormente.\nA seguir, verifique el número de filas (observaciones), columnas (variables), sus respectivos tipos de datos y algunos valores de muestra.\n\nstr(survey) # mostra la eSTRuctura de la encuesta\n\n'data.frame':   3922 obs. of  34 variables:\n $ year               : int  2019 2019 2019 2019 2019 2019 2019 2019 2019 2019 ...\n $ survey             : chr  \"EPEC\" \"EPEC\" \"EPEC\" \"EPEC\" ...\n $ samp               : chr  \"Hosts\" \"Hosts\" \"Hosts\" \"Hosts\" ...\n $ wave               : int  1 1 1 1 1 1 1 1 1 1 ...\n $ code_province      : chr  \"Azuay\" \"Azuay\" \"Azuay\" \"Azuay\" ...\n $ age                : int  NA NA NA NA NA NA NA NA NA NA ...\n $ sex                : chr  \"\" \"\" \"\" \"\" ...\n $ female             : int  NA NA NA NA NA NA NA NA NA NA ...\n $ male               : int  NA NA NA NA NA NA NA NA NA NA ...\n $ hh_size            : int  NA NA NA NA NA NA NA NA NA NA ...\n $ marital_status     : chr  \"\" \"\" \"\" \"\" ...\n $ edu_years          : int  NA NA NA NA NA NA NA NA NA NA ...\n $ edu_level          : chr  \"\" \"\" \"\" \"\" ...\n $ employed           : chr  \"\" \"\" \"\" \"\" ...\n $ unemployed         : chr  \"\" \"\" \"\" \"\" ...\n $ inactive           : chr  \"\" \"\" \"\" \"\" ...\n $ weight             : num  703 949 844 844 718 ...\n $ occupation         : chr  \"Services\" \"Crafts\" \"Crafts\" \"Elementary/basic\" ...\n $ health_insurance   : chr  \"\" \"\" \"\" \"\" ...\n $ homologate         : chr  \"\" \"\" \"\" \"\" ...\n $ reason_nohomologate: chr  \"\" \"\" \"\" \"\" ...\n $ company            : chr  \"\" \"\" \"\" \"\" ...\n $ plan_residency     : chr  \"\" \"\" \"\" \"\" ...\n $ reason_migra       : chr  \"\" \"\" \"\" \"\" ...\n $ discriminated      : chr  \"\" \"\" \"\" \"\" ...\n $ integration_3_1    : int  NA NA NA NA NA NA NA NA NA NA ...\n $ integration_3_2    : int  NA NA NA NA NA NA NA NA NA NA ...\n $ integration_3_3    : int  NA NA NA NA NA NA NA NA NA NA ...\n $ integration_3_4    : int  NA NA NA NA NA NA NA NA NA NA ...\n $ integration_3_5    : int  NA NA NA NA NA NA NA NA NA NA ...\n $ integration_3_6    : int  NA NA NA NA NA NA NA NA NA NA ...\n $ integration_3_7    : int  NA NA NA NA NA NA NA NA NA NA ...\n $ integration_3_8    : int  NA NA NA NA NA NA NA NA NA NA ...\n $ entry_register     : chr  \"\" \"\" \"\" \"\" ...\n\n\nLos resultados muestran que hay 3922 rows and r ncol(survey) . El resultado también muestra los nombres de las columnas después del signo de dólar, el tipo de datos (int y num para valores numéricos, chr para cadenas de texto) y los valores de las primeras filas.\nLas variables a las que les faltan valores están representadas por NA para variables numéricas y comillas vacías para categóricas.\nLa función str() proporciona un resumen conciso del conjunto de datos, mostrando su tipo de datos, dimensiones y contenido."
  }
]